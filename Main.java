import java.util.*;

// === 1. Singleton ===
class SecurityManager {
    private static SecurityManager instance;

    private SecurityManager() {}

    public static SecurityManager getInstance() {
        if (instance == null) {
            instance = new SecurityManager();
        }
        return instance;
    }

    public void handleRequest(UserRequest request, AccessHandler handler) {
        handler.handle(request);
    }
}

// === 2. Chain of Responsibility ===
abstract class AccessHandler {
    protected AccessHandler next;

    public void setNext(AccessHandler next) {
        this.next = next;
    }

    public void handle(UserRequest request) {
        if (next != null) {
            next.handle(request);
        } else {
            System.out.println("‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: " + request.getUsername());
        }
    }
}

class LoginHandler extends AccessHandler {
    public void handle(UserRequest request) {
        if (request.getUsername() == null || request.getUsername().isEmpty()) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –ª–æ–≥—ñ–Ω–∞");
        } else {
            System.out.println("üîì –õ–æ–≥—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ");
            super.handle(request);
        }
    }
}

class PermissionHandler extends AccessHandler {
    public void handle(UserRequest request) {
        if (!request.hasPermission()) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É");
        } else {
            System.out.println("üõ°Ô∏è –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ");
            super.handle(request);
        }
    }
}

// === 3. Decorator ===
interface IRequest {
    void process();
}

class BasicRequest implements IRequest {
    private final String username;

    public BasicRequest(String username) {
        this.username = username;
    }

    public void process() {
        System.out.println("üì¶ –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: " + username);
    }
}

abstract class RequestDecorator implements IRequest {
    protected IRequest request;

    public RequestDecorator(IRequest request) {
        this.request = request;
    }

    public void process() {
        request.process();
    }
}

class IPLoggerDecorator extends RequestDecorator {
    public IPLoggerDecorator(IRequest request) {
        super(request);
    }

    public void process() {
        System.out.println("üåê IP-–ª–æ–≥—É–≤–∞–Ω–Ω—è...");
        super.process();
    }
}

class TimeLoggerDecorator extends RequestDecorator {
    public TimeLoggerDecorator(IRequest request) {
        super(request);
    }

    public void process() {
        System.out.println("‚è∞ –ß–∞—Å –∑–∞–ø–∏—Ç—É: " + new Date());
        super.process();
    }
}

// === –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
class UserRequest {
    private final String username;
    private final boolean permission;

    public UserRequest(String username, boolean permission) {
        this.username = username;
        this.permission = permission;
    }

    public String getUsername() {
        return username;
    }

    public boolean hasPermission() {
        return permission;
    }
}

// === Main ===
public class Main {
    public static void main(String[] args) {
        // === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É ===
        UserRequest userRequest = new UserRequest("admin", true);

        // === –û–±–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ ===
        IRequest decoratedRequest = new TimeLoggerDecorator(
                                        new IPLoggerDecorator(
                                            new BasicRequest(userRequest.getUsername())));
        decoratedRequest.process();

        // === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–∂–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ ===
        AccessHandler login = new LoginHandler();
        AccessHandler permission = new PermissionHandler();
        login.setNext(permission);

        // === –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Singleton –¥–ª—è –æ–±—Ä–æ–±–∫–∏ ===
        SecurityManager.getInstance().handleRequest(userRequest, login);
    }
}
